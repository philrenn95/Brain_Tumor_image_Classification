import numpy as np
import tensorflow as tf
import os
import tensorflow_addons as tfa
import datapipeline
import RESNET
import time
import sklearn.metrics

class ResNetModel:
    def __init__(self, data_dir, batch_size, epochs, img_shape, img_depth):
        self.data_dir = data_dir
        self.batch_size = batch_size
        self.epochs = epochs
        self.img_shape = (img_shape, img_shape, img_depth)
        self.optimizer = tfa.optimizers.AdaBelief(
            learning_rate=1e-3, 
            warmup_proportion=0.2, 
            min_lr=5e-5, 
            total_steps=self.batch_size
        )

    def train(self):
        model = RESNET.building_network(self.img_shape, self.optimizer)
        pipeline = datapipeline.Data_pipeline(directory=self.data_dir, img_shape=self.img_shape)
        x_train, x_validation, y_train, y_validation = pipeline.import_data(train=True)

        for epoch in range(self.epochs):
            epoch_start_time = time.time()

            x_minibatch, y_minibatch = self._get_minibatch(x_train, y_train, pipeline)
            train_loss, train_accuracy = model.train_on_batch(x_minibatch, y_minibatch)

            x_minibatch, y_minibatch = self._get_minibatch(x_validation, y_validation)
            validation_loss, validation_accuracy = model.evaluate(x_minibatch, y_minibatch, verbose=0)

            epoch_end_time = time.time()
            self._log_epoch_results(epoch, epoch_end_time - epoch_start_time, train_loss, train_accuracy, validation_loss, validation_accuracy)

        self._save_model(model)

    def test(self):
        print("Testing trained model")
        model = tf.keras.models.load_model(self._get_model_path())
        pipeline = datapipeline.Data_pipeline(directory=self.data_dir, img_shape=self.img_shape)
        x_test, y_test = pipeline.import_data(test=True)

        y_pred = model.predict(x_test, verbose=1)
        confusion_matrix = sklearn.metrics.confusion_matrix(y_true=y_test, y_pred=y_pred)
        print(confusion_matrix)

    def _get_minibatch(self, x_data, y_data, pipeline=None):
        indices = np.random.randint(0, x_data.shape[0], size=self.batch_size)
        x_minibatch = x_data[indices]
        if pipeline:
            x_minibatch = pipeline.augmentaion(x_minibatch)
        y_minibatch = y_data[indices]
        return x_minibatch, y_minibatch

    def _log_epoch_results(self, epoch, duration, train_loss, train_accuracy, validation_loss, validation_accuracy):
        print(f"\nEpoch: {epoch:3d}    Duration: {duration:.3f} s")
        print(f"Train loss: {train_loss:.3f}    Train accuracy: {train_accuracy:.2f}")
        print(f"Valid loss: {validation_loss:.3f}    Valid accuracy: {validation_accuracy:.2f}")

    def _save_model(self, model):
        model_dir = os.path.join(os.getcwd(), "MODEL")
        if not os.path.exists(model_dir):
            os.makedirs(model_dir)
        model_path = os.path.join(model_dir, "RESNET_PNEUMONIA.h5")
        print("Saving model")
        model.save(model_path)

    def _get_model_path(self):
        return os.path.join(os.getcwd(), "MODEL", "RESNET_PNEUMONIA.h5")

if __name__ == "__main__":
    train_directory = "C://Users//renne//Desktop//Master//Projekte//Data//Pneunomia//chest_xray//train"
    resnet = ResNetModel(data_dir=train_directory, batch_size=80, epochs=5000, img_shape=512, img_depth=1)
    resnet.train()

    test_directory = "C://Users//renne//Desktop//Master//Projekte//Data//Pneunomia//chest_xray//test"
    resnet = ResNetModel(data_dir=test_directory, batch_size=80, epochs=0, img_shape=512, img_depth=1)
    resnet.test()
